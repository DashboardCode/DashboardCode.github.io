/*! For license information please see index.js.LICENSE.txt */
(()=>{"use strict";function e(e){if(null==e)return window;if("[object Window]"!==e.toString()){var t=e.ownerDocument;return t&&t.defaultView||window}return e}function t(t){return t instanceof e(t).Element||t instanceof Element}function n(t){return t instanceof e(t).HTMLElement||t instanceof HTMLElement}function i(t){return"undefined"!=typeof ShadowRoot&&(t instanceof e(t).ShadowRoot||t instanceof ShadowRoot)}var o=Math.round;function r(e,t){void 0===t&&(t=!1);var i=e.getBoundingClientRect(),r=1,c=1;if(n(e)&&t){var a=e.offsetHeight,s=e.offsetWidth;s>0&&(r=i.width/s||1),a>0&&(c=i.height/a||1)}return{width:o(i.width/r),height:o(i.height/c),top:o(i.top/c),right:o(i.right/r),bottom:o(i.bottom/c),left:o(i.left/r),x:o(i.left/r),y:o(i.top/c)}}function c(t){var n=e(t);return{scrollLeft:n.pageXOffset,scrollTop:n.pageYOffset}}function a(e){return e?(e.nodeName||"").toLowerCase():null}function s(e){return((t(e)?e.ownerDocument:e.document)||window.document).documentElement}function u(e){return r(s(e)).left+c(e).scrollLeft}function l(t){return e(t).getComputedStyle(t)}function d(e){var t=l(e),n=t.overflow,i=t.overflowX,o=t.overflowY;return/auto|scroll|overlay|hidden/.test(n+o+i)}function p(t,i,o){void 0===o&&(o=!1);var l,p,f=n(i),h=n(i)&&function(e){var t=e.getBoundingClientRect(),n=t.width/e.offsetWidth||1,i=t.height/e.offsetHeight||1;return 1!==n||1!==i}(i),g=s(i),m=r(t,h),v={scrollLeft:0,scrollTop:0},b={x:0,y:0};return(f||!f&&!o)&&(("body"!==a(i)||d(g))&&(v=(l=i)!==e(l)&&n(l)?{scrollLeft:(p=l).scrollLeft,scrollTop:p.scrollTop}:c(l)),n(i)?((b=r(i,!0)).x+=i.clientLeft,b.y+=i.clientTop):g&&(b.x=u(g))),{x:m.left+v.scrollLeft-b.x,y:m.top+v.scrollTop-b.y,width:m.width,height:m.height}}function f(e){var t=r(e),n=e.offsetWidth,i=e.offsetHeight;return Math.abs(t.width-n)<=1&&(n=t.width),Math.abs(t.height-i)<=1&&(i=t.height),{x:e.offsetLeft,y:e.offsetTop,width:n,height:i}}function h(e){return"html"===a(e)?e:e.assignedSlot||e.parentNode||(i(e)?e.host:null)||s(e)}function g(e){return["html","body","#document"].indexOf(a(e))>=0?e.ownerDocument.body:n(e)&&d(e)?e:g(h(e))}function m(t,n){var i;void 0===n&&(n=[]);var o=g(t),r=o===(null==(i=t.ownerDocument)?void 0:i.body),c=e(o),a=r?[c].concat(c.visualViewport||[],d(o)?o:[]):o,s=n.concat(a);return r?s:s.concat(m(h(a)))}function v(e){return["table","td","th"].indexOf(a(e))>=0}function b(e){return n(e)&&"fixed"!==l(e).position?e.offsetParent:null}function y(t){for(var i=e(t),o=b(t);o&&v(o)&&"static"===l(o).position;)o=b(o);return o&&("html"===a(o)||"body"===a(o)&&"static"===l(o).position)?i:o||function(e){var t=-1!==navigator.userAgent.toLowerCase().indexOf("firefox");if(-1!==navigator.userAgent.indexOf("Trident")&&n(e)&&"fixed"===l(e).position)return null;for(var i=h(e);n(i)&&["html","body"].indexOf(a(i))<0;){var o=l(i);if("none"!==o.transform||"none"!==o.perspective||"paint"===o.contain||-1!==["transform","perspective"].indexOf(o.willChange)||t&&"filter"===o.willChange||t&&o.filter&&"none"!==o.filter)return i;i=i.parentNode}return null}(t)||i}var C="top",D="bottom",A="right",k="left",E="auto",P=[C,D,A,k],w="start",S="end",L="viewport",O="popper",x=P.reduce((function(e,t){return e.concat([t+"-"+w,t+"-"+S])}),[]),H=[].concat(P,[E]).reduce((function(e,t){return e.concat([t,t+"-"+w,t+"-"+S])}),[]),I=["beforeRead","read","afterRead","beforeMain","main","afterMain","beforeWrite","write","afterWrite"];function M(e){var t=new Map,n=new Set,i=[];function o(e){n.add(e.name),[].concat(e.requires||[],e.requiresIfExists||[]).forEach((function(e){if(!n.has(e)){var i=t.get(e);i&&o(i)}})),i.push(e)}return e.forEach((function(e){t.set(e.name,e)})),e.forEach((function(e){n.has(e.name)||o(e)})),i}var F={placement:"bottom",modifiers:[],strategy:"absolute"};function B(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return!t.some((function(e){return!(e&&"function"==typeof e.getBoundingClientRect)}))}function _(e){void 0===e&&(e={});var n=e,i=n.defaultModifiers,o=void 0===i?[]:i,r=n.defaultOptions,c=void 0===r?F:r;return function(e,n,i){void 0===i&&(i=c);var r,a,s={placement:"bottom",orderedModifiers:[],options:Object.assign({},F,c),modifiersData:{},elements:{reference:e,popper:n},attributes:{},styles:{}},u=[],l=!1,d={state:s,setOptions:function(i){var r="function"==typeof i?i(s.options):i;h(),s.options=Object.assign({},c,s.options,r),s.scrollParents={reference:t(e)?m(e):e.contextElement?m(e.contextElement):[],popper:m(n)};var a,l,p=function(e){var t=M(e);return I.reduce((function(e,n){return e.concat(t.filter((function(e){return e.phase===n})))}),[])}((a=[].concat(o,s.options.modifiers),l=a.reduce((function(e,t){var n=e[t.name];return e[t.name]=n?Object.assign({},n,t,{options:Object.assign({},n.options,t.options),data:Object.assign({},n.data,t.data)}):t,e}),{}),Object.keys(l).map((function(e){return l[e]}))));return s.orderedModifiers=p.filter((function(e){return e.enabled})),s.orderedModifiers.forEach((function(e){var t=e.name,n=e.options,i=void 0===n?{}:n,o=e.effect;if("function"==typeof o){var r=o({state:s,name:t,instance:d,options:i});u.push(r||function(){})}})),d.update()},forceUpdate:function(){if(!l){var e=s.elements,t=e.reference,n=e.popper;if(B(t,n)){s.rects={reference:p(t,y(n),"fixed"===s.options.strategy),popper:f(n)},s.reset=!1,s.placement=s.options.placement,s.orderedModifiers.forEach((function(e){return s.modifiersData[e.name]=Object.assign({},e.data)}));for(var i=0;i<s.orderedModifiers.length;i++)if(!0!==s.reset){var o=s.orderedModifiers[i],r=o.fn,c=o.options,a=void 0===c?{}:c,u=o.name;"function"==typeof r&&(s=r({state:s,options:a,name:u,instance:d})||s)}else s.reset=!1,i=-1}}},update:(r=function(){return new Promise((function(e){d.forceUpdate(),e(s)}))},function(){return a||(a=new Promise((function(e){Promise.resolve().then((function(){a=void 0,e(r())}))}))),a}),destroy:function(){h(),l=!0}};if(!B(e,n))return d;function h(){u.forEach((function(e){return e()})),u=[]}return d.setOptions(i).then((function(e){!l&&i.onFirstUpdate&&i.onFirstUpdate(e)})),d}}var V={passive:!0};const T={name:"eventListeners",enabled:!0,phase:"write",fn:function(){},effect:function(t){var n=t.state,i=t.instance,o=t.options,r=o.scroll,c=void 0===r||r,a=o.resize,s=void 0===a||a,u=e(n.elements.popper),l=[].concat(n.scrollParents.reference,n.scrollParents.popper);return c&&l.forEach((function(e){e.addEventListener("scroll",i.update,V)})),s&&u.addEventListener("resize",i.update,V),function(){c&&l.forEach((function(e){e.removeEventListener("scroll",i.update,V)})),s&&u.removeEventListener("resize",i.update,V)}},data:{}};function N(e){return e.split("-")[0]}function R(e){return e.split("-")[1]}function W(e){return["top","bottom"].indexOf(e)>=0?"x":"y"}function j(e){var t,n=e.reference,i=e.element,o=e.placement,r=o?N(o):null,c=o?R(o):null,a=n.x+n.width/2-i.width/2,s=n.y+n.height/2-i.height/2;switch(r){case C:t={x:a,y:n.y-i.height};break;case D:t={x:a,y:n.y+n.height};break;case A:t={x:n.x+n.width,y:s};break;case k:t={x:n.x-i.width,y:s};break;default:t={x:n.x,y:n.y}}var u=r?W(r):null;if(null!=u){var l="y"===u?"height":"width";switch(c){case w:t[u]=t[u]-(n[l]/2-i[l]/2);break;case S:t[u]=t[u]+(n[l]/2-i[l]/2)}}return t}const q={name:"popperOffsets",enabled:!0,phase:"read",fn:function(e){var t=e.state,n=e.name;t.modifiersData[n]=j({reference:t.rects.reference,element:t.rects.popper,strategy:"absolute",placement:t.placement})},data:{}};var U=Math.max,z=Math.min,G=Math.round,K={top:"auto",right:"auto",bottom:"auto",left:"auto"};function X(t){var n,i=t.popper,o=t.popperRect,r=t.placement,c=t.variation,a=t.offsets,u=t.position,d=t.gpuAcceleration,p=t.adaptive,f=t.roundOffsets,h=!0===f?function(e){var t=e.x,n=e.y,i=window.devicePixelRatio||1;return{x:G(G(t*i)/i)||0,y:G(G(n*i)/i)||0}}(a):"function"==typeof f?f(a):a,g=h.x,m=void 0===g?0:g,v=h.y,b=void 0===v?0:v,E=a.hasOwnProperty("x"),P=a.hasOwnProperty("y"),w=k,L=C,O=window;if(p){var x=y(i),H="clientHeight",I="clientWidth";x===e(i)&&"static"!==l(x=s(i)).position&&"absolute"===u&&(H="scrollHeight",I="scrollWidth"),x=x,r!==C&&(r!==k&&r!==A||c!==S)||(L=D,b-=x[H]-o.height,b*=d?1:-1),r!==k&&(r!==C&&r!==D||c!==S)||(w=A,m-=x[I]-o.width,m*=d?1:-1)}var M,F=Object.assign({position:u},p&&K);return d?Object.assign({},F,((M={})[L]=P?"0":"",M[w]=E?"0":"",M.transform=(O.devicePixelRatio||1)<=1?"translate("+m+"px, "+b+"px)":"translate3d("+m+"px, "+b+"px, 0)",M)):Object.assign({},F,((n={})[L]=P?b+"px":"",n[w]=E?m+"px":"",n.transform="",n))}var Y={left:"right",right:"left",bottom:"top",top:"bottom"};function $(e){return e.replace(/left|right|bottom|top/g,(function(e){return Y[e]}))}var J={start:"end",end:"start"};function Q(e){return e.replace(/start|end/g,(function(e){return J[e]}))}function Z(e,t){var n=t.getRootNode&&t.getRootNode();if(e.contains(t))return!0;if(n&&i(n)){var o=t;do{if(o&&e.isSameNode(o))return!0;o=o.parentNode||o.host}while(o)}return!1}function ee(e){return Object.assign({},e,{left:e.x,top:e.y,right:e.x+e.width,bottom:e.y+e.height})}function te(t,i){return i===L?ee(function(t){var n=e(t),i=s(t),o=n.visualViewport,r=i.clientWidth,c=i.clientHeight,a=0,l=0;return o&&(r=o.width,c=o.height,/^((?!chrome|android).)*safari/i.test(navigator.userAgent)||(a=o.offsetLeft,l=o.offsetTop)),{width:r,height:c,x:a+u(t),y:l}}(t)):n(i)?function(e){var t=r(e);return t.top=t.top+e.clientTop,t.left=t.left+e.clientLeft,t.bottom=t.top+e.clientHeight,t.right=t.left+e.clientWidth,t.width=e.clientWidth,t.height=e.clientHeight,t.x=t.left,t.y=t.top,t}(i):ee(function(e){var t,n=s(e),i=c(e),o=null==(t=e.ownerDocument)?void 0:t.body,r=U(n.scrollWidth,n.clientWidth,o?o.scrollWidth:0,o?o.clientWidth:0),a=U(n.scrollHeight,n.clientHeight,o?o.scrollHeight:0,o?o.clientHeight:0),d=-i.scrollLeft+u(e),p=-i.scrollTop;return"rtl"===l(o||n).direction&&(d+=U(n.clientWidth,o?o.clientWidth:0)-r),{width:r,height:a,x:d,y:p}}(s(t)))}function ne(e){return Object.assign({},{top:0,right:0,bottom:0,left:0},e)}function ie(e,t){return t.reduce((function(t,n){return t[n]=e,t}),{})}function oe(e,i){void 0===i&&(i={});var o=i,c=o.placement,u=void 0===c?e.placement:c,d=o.boundary,p=void 0===d?"clippingParents":d,f=o.rootBoundary,g=void 0===f?L:f,v=o.elementContext,b=void 0===v?O:v,k=o.altBoundary,E=void 0!==k&&k,w=o.padding,S=void 0===w?0:w,x=ne("number"!=typeof S?S:ie(S,P)),H=b===O?"reference":O,I=e.rects.popper,M=e.elements[E?H:b],F=function(e,i,o){var r="clippingParents"===i?function(e){var i=m(h(e)),o=["absolute","fixed"].indexOf(l(e).position)>=0&&n(e)?y(e):e;return t(o)?i.filter((function(e){return t(e)&&Z(e,o)&&"body"!==a(e)})):[]}(e):[].concat(i),c=[].concat(r,[o]),s=c[0],u=c.reduce((function(t,n){var i=te(e,n);return t.top=U(i.top,t.top),t.right=z(i.right,t.right),t.bottom=z(i.bottom,t.bottom),t.left=U(i.left,t.left),t}),te(e,s));return u.width=u.right-u.left,u.height=u.bottom-u.top,u.x=u.left,u.y=u.top,u}(t(M)?M:M.contextElement||s(e.elements.popper),p,g),B=r(e.elements.reference),_=j({reference:B,element:I,strategy:"absolute",placement:u}),V=ee(Object.assign({},I,_)),T=b===O?V:B,N={top:F.top-T.top+x.top,bottom:T.bottom-F.bottom+x.bottom,left:F.left-T.left+x.left,right:T.right-F.right+x.right},R=e.modifiersData.offset;if(b===O&&R){var W=R[u];Object.keys(N).forEach((function(e){var t=[A,D].indexOf(e)>=0?1:-1,n=[C,D].indexOf(e)>=0?"y":"x";N[e]+=W[n]*t}))}return N}function re(e,t,n){return U(e,z(t,n))}function ce(e,t,n){return void 0===n&&(n={x:0,y:0}),{top:e.top-t.height-n.y,right:e.right-t.width+n.x,bottom:e.bottom-t.height+n.y,left:e.left-t.width-n.x}}function ae(e){return[C,A,D,k].some((function(t){return e[t]>=0}))}var se=_({defaultModifiers:[T,q,{name:"computeStyles",enabled:!0,phase:"beforeWrite",fn:function(e){var t=e.state,n=e.options,i=n.gpuAcceleration,o=void 0===i||i,r=n.adaptive,c=void 0===r||r,a=n.roundOffsets,s=void 0===a||a,u={placement:N(t.placement),variation:R(t.placement),popper:t.elements.popper,popperRect:t.rects.popper,gpuAcceleration:o};null!=t.modifiersData.popperOffsets&&(t.styles.popper=Object.assign({},t.styles.popper,X(Object.assign({},u,{offsets:t.modifiersData.popperOffsets,position:t.options.strategy,adaptive:c,roundOffsets:s})))),null!=t.modifiersData.arrow&&(t.styles.arrow=Object.assign({},t.styles.arrow,X(Object.assign({},u,{offsets:t.modifiersData.arrow,position:"absolute",adaptive:!1,roundOffsets:s})))),t.attributes.popper=Object.assign({},t.attributes.popper,{"data-popper-placement":t.placement})},data:{}},{name:"applyStyles",enabled:!0,phase:"write",fn:function(e){var t=e.state;Object.keys(t.elements).forEach((function(e){var i=t.styles[e]||{},o=t.attributes[e]||{},r=t.elements[e];n(r)&&a(r)&&(Object.assign(r.style,i),Object.keys(o).forEach((function(e){var t=o[e];!1===t?r.removeAttribute(e):r.setAttribute(e,!0===t?"":t)})))}))},effect:function(e){var t=e.state,i={popper:{position:t.options.strategy,left:"0",top:"0",margin:"0"},arrow:{position:"absolute"},reference:{}};return Object.assign(t.elements.popper.style,i.popper),t.styles=i,t.elements.arrow&&Object.assign(t.elements.arrow.style,i.arrow),function(){Object.keys(t.elements).forEach((function(e){var o=t.elements[e],r=t.attributes[e]||{},c=Object.keys(t.styles.hasOwnProperty(e)?t.styles[e]:i[e]).reduce((function(e,t){return e[t]="",e}),{});n(o)&&a(o)&&(Object.assign(o.style,c),Object.keys(r).forEach((function(e){o.removeAttribute(e)})))}))}},requires:["computeStyles"]},{name:"offset",enabled:!0,phase:"main",requires:["popperOffsets"],fn:function(e){var t=e.state,n=e.options,i=e.name,o=n.offset,r=void 0===o?[0,0]:o,c=H.reduce((function(e,n){return e[n]=function(e,t,n){var i=N(e),o=[k,C].indexOf(i)>=0?-1:1,r="function"==typeof n?n(Object.assign({},t,{placement:e})):n,c=r[0],a=r[1];return c=c||0,a=(a||0)*o,[k,A].indexOf(i)>=0?{x:a,y:c}:{x:c,y:a}}(n,t.rects,r),e}),{}),a=c[t.placement],s=a.x,u=a.y;null!=t.modifiersData.popperOffsets&&(t.modifiersData.popperOffsets.x+=s,t.modifiersData.popperOffsets.y+=u),t.modifiersData[i]=c}},{name:"flip",enabled:!0,phase:"main",fn:function(e){var t=e.state,n=e.options,i=e.name;if(!t.modifiersData[i]._skip){for(var o=n.mainAxis,r=void 0===o||o,c=n.altAxis,a=void 0===c||c,s=n.fallbackPlacements,u=n.padding,l=n.boundary,d=n.rootBoundary,p=n.altBoundary,f=n.flipVariations,h=void 0===f||f,g=n.allowedAutoPlacements,m=t.options.placement,v=N(m),b=s||(v!==m&&h?function(e){if(N(e)===E)return[];var t=$(e);return[Q(e),t,Q(t)]}(m):[$(m)]),y=[m].concat(b).reduce((function(e,n){return e.concat(N(n)===E?function(e,t){void 0===t&&(t={});var n=t,i=n.placement,o=n.boundary,r=n.rootBoundary,c=n.padding,a=n.flipVariations,s=n.allowedAutoPlacements,u=void 0===s?H:s,l=R(i),d=l?a?x:x.filter((function(e){return R(e)===l})):P,p=d.filter((function(e){return u.indexOf(e)>=0}));0===p.length&&(p=d);var f=p.reduce((function(t,n){return t[n]=oe(e,{placement:n,boundary:o,rootBoundary:r,padding:c})[N(n)],t}),{});return Object.keys(f).sort((function(e,t){return f[e]-f[t]}))}(t,{placement:n,boundary:l,rootBoundary:d,padding:u,flipVariations:h,allowedAutoPlacements:g}):n)}),[]),S=t.rects.reference,L=t.rects.popper,O=new Map,I=!0,M=y[0],F=0;F<y.length;F++){var B=y[F],_=N(B),V=R(B)===w,T=[C,D].indexOf(_)>=0,W=T?"width":"height",j=oe(t,{placement:B,boundary:l,rootBoundary:d,altBoundary:p,padding:u}),q=T?V?A:k:V?D:C;S[W]>L[W]&&(q=$(q));var U=$(q),z=[];if(r&&z.push(j[_]<=0),a&&z.push(j[q]<=0,j[U]<=0),z.every((function(e){return e}))){M=B,I=!1;break}O.set(B,z)}if(I)for(var G=function(e){var t=y.find((function(t){var n=O.get(t);if(n)return n.slice(0,e).every((function(e){return e}))}));if(t)return M=t,"break"},K=h?3:1;K>0&&"break"!==G(K);K--);t.placement!==M&&(t.modifiersData[i]._skip=!0,t.placement=M,t.reset=!0)}},requiresIfExists:["offset"],data:{_skip:!1}},{name:"preventOverflow",enabled:!0,phase:"main",fn:function(e){var t=e.state,n=e.options,i=e.name,o=n.mainAxis,r=void 0===o||o,c=n.altAxis,a=void 0!==c&&c,s=n.boundary,u=n.rootBoundary,l=n.altBoundary,d=n.padding,p=n.tether,h=void 0===p||p,g=n.tetherOffset,m=void 0===g?0:g,v=oe(t,{boundary:s,rootBoundary:u,padding:d,altBoundary:l}),b=N(t.placement),E=R(t.placement),P=!E,S=W(b),L="x"===S?"y":"x",O=t.modifiersData.popperOffsets,x=t.rects.reference,H=t.rects.popper,I="function"==typeof m?m(Object.assign({},t.rects,{placement:t.placement})):m,M={x:0,y:0};if(O){if(r||a){var F="y"===S?C:k,B="y"===S?D:A,_="y"===S?"height":"width",V=O[S],T=O[S]+v[F],j=O[S]-v[B],q=h?-H[_]/2:0,G=E===w?x[_]:H[_],K=E===w?-H[_]:-x[_],X=t.elements.arrow,Y=h&&X?f(X):{width:0,height:0},$=t.modifiersData["arrow#persistent"]?t.modifiersData["arrow#persistent"].padding:{top:0,right:0,bottom:0,left:0},J=$[F],Q=$[B],Z=re(0,x[_],Y[_]),ee=P?x[_]/2-q-Z-J-I:G-Z-J-I,te=P?-x[_]/2+q+Z+Q+I:K+Z+Q+I,ne=t.elements.arrow&&y(t.elements.arrow),ie=ne?"y"===S?ne.clientTop||0:ne.clientLeft||0:0,ce=t.modifiersData.offset?t.modifiersData.offset[t.placement][S]:0,ae=O[S]+ee-ce-ie,se=O[S]+te-ce;if(r){var ue=re(h?z(T,ae):T,V,h?U(j,se):j);O[S]=ue,M[S]=ue-V}if(a){var le="x"===S?C:k,de="x"===S?D:A,pe=O[L],fe=pe+v[le],he=pe-v[de],ge=re(h?z(fe,ae):fe,pe,h?U(he,se):he);O[L]=ge,M[L]=ge-pe}}t.modifiersData[i]=M}},requiresIfExists:["offset"]},{name:"arrow",enabled:!0,phase:"main",fn:function(e){var t,n=e.state,i=e.name,o=e.options,r=n.elements.arrow,c=n.modifiersData.popperOffsets,a=N(n.placement),s=W(a),u=[k,A].indexOf(a)>=0?"height":"width";if(r&&c){var l=function(e,t){return ne("number"!=typeof(e="function"==typeof e?e(Object.assign({},t.rects,{placement:t.placement})):e)?e:ie(e,P))}(o.padding,n),d=f(r),p="y"===s?C:k,h="y"===s?D:A,g=n.rects.reference[u]+n.rects.reference[s]-c[s]-n.rects.popper[u],m=c[s]-n.rects.reference[s],v=y(r),b=v?"y"===s?v.clientHeight||0:v.clientWidth||0:0,E=g/2-m/2,w=l[p],S=b-d[u]-l[h],L=b/2-d[u]/2+E,O=re(w,L,S),x=s;n.modifiersData[i]=((t={})[x]=O,t.centerOffset=O-L,t)}},effect:function(e){var t=e.state,n=e.options.element,i=void 0===n?"[data-popper-arrow]":n;null!=i&&("string"!=typeof i||(i=t.elements.popper.querySelector(i)))&&Z(t.elements.popper,i)&&(t.elements.arrow=i)},requires:["popperOffsets"],requiresIfExists:["preventOverflow"]},{name:"hide",enabled:!0,phase:"main",requiresIfExists:["preventOverflow"],fn:function(e){var t=e.state,n=e.name,i=t.rects.reference,o=t.rects.popper,r=t.modifiersData.preventOverflow,c=oe(t,{elementContext:"reference"}),a=oe(t,{altBoundary:!0}),s=ce(c,i),u=ce(a,o,r),l=ae(s),d=ae(u);t.modifiersData[n]={referenceClippingOffsets:s,popperEscapeOffsets:u,isReferenceHidden:l,hasPopperEscaped:d},t.attributes.popper=Object.assign({},t.attributes.popper,{"data-popper-reference-hidden":l,"data-popper-escaped":d})}}]});function ue(e,t){for(var n=null,i=0;i<e.children.length;i++){var o=e.children[i];if(o.tagName==t){n=o;break}}return n}function le(e,t){return he(e,(function(e){return e.tagName===t}))}function de(e,t){return he(e,(function(e){return e.classList.contains(t)}))}function pe(e,t){return e===t||e.contains(t)}function fe(e,t,n){var i=e.getAttribute("data-"+t+"-"+n);return i||(e.getAttribute("data-"+n)||null)}function he(e,t){return e&&e instanceof Element?t(e)?e:he(e.parentNode,t):null}function ge(){var e=[];return{bind:function(t,n,i){t.addEventListener(n,i),e.push({element:t,eventName:n,handler:i})},unbind:function(){e.forEach((function(e){var t=e.element,n=e.eventName,i=e.handler;t.removeEventListener(n,i)}))}}}function me(){}function ve(e){var t=de(e,"input-group");return t?function(){var e=null;return t.classList.contains("input-group-lg")?e="lg":t.classList.contains("input-group-sm")&&(e="sm"),e}:function(){var t=null;return e.classList.contains("form-select-lg")||e.classList.contains("form-control-lg")?t="lg":(e.classList.contains("form-select-sm")||e.classList.contains("form-control-sm"))&&(t="sm"),t}}function be(e){var t=null,n='label[for="'+e.id+'"]',i=e.parentElement;return(t=i.querySelector(n))||(t=i.parentElement.querySelector(n)),t}me.plugDefaultConfig=function(e){e.css=ye,function(e){e.useCssPatch=!0,e.cssPatch=Ce,e.pickButtonHTML='<button aria-label="Remove" tabIndex="-1" type="button"></button>',e.composeGetSize=ve,e.getDefaultLabel=be}(e)};var ye={choices:"dropdown-menu",choicesList:"",choice_hover:"hover",choice_selected:"selected",choice_disabled:"disabled",picks:"form-control",picks_focus:"focus",picks_disabled:"disabled",pick_disabled:"",pickFilter:"",filterInput:"",pick:{classes:"badge"},pickContent:"",pickContent_disabled:"disabled",pickButton:"btn-close",choiceCheckBox_disabled:"disabled",choiceContent:"form-check",choiceCheckBox:"form-check-input",choiceLabel:"form-check-label",choiceLabel_disabled:"",label_floating_lifted:"floating-lifted",picks_floating_lifted:"floating-lifted",warning:"alert-warning"},Ce={choicesList:{listStyleType:"none",paddingLeft:"0",paddingRight:"0",marginBottom:"0"},picks:{listStyleType:"none",display:"flex",flexWrap:"wrap",height:"auto",marginBottom:"0",cursor:"text"},choice:{classes:"px-md-2 px-1",styles:{cursor:"pointer"}},choice_hover:"text-primary bg-light",choice_disabled_hover:"bg-light",filterInput:{border:"0px",height:"auto",boxShadow:"none",padding:"0",margin:"0",outline:"none",backgroundColor:"transparent",backgroundImage:"none"},filterInput_empty:"form-control",picks_disabled:{backgroundColor:"#e9ecef"},picks_focus:{borderColor:"#80bdff",boxShadow:"0 0 0 0.2rem rgba(0, 123, 255, 0.25)"},picks_focus_valid:{borderColor:"",boxShadow:"0 0 0 0.2rem rgba(40, 167, 69, 0.25)"},picks_focus_invalid:{borderColor:"",boxShadow:"0 0 0 0.2rem rgba(220, 53, 69, 0.25)"},picks_def:{minHeight:"calc(2.25rem + 2px)"},picks_lg:{minHeight:"calc(2.875rem + 2px)"},picks_sm:{minHeight:"calc(1.8125rem + 2px)"},picks_floating_def:{minHeight:"calc(3.5rem + 2px)"},pick:{paddingLeft:"0",paddingRight:".5rem",paddingInlineStart:"0",paddingInlineEnd:"0.5rem",color:"var(--bs-dark)"},pickButton:{fontSize:"0.8em",float:"none",verticalAlign:"text-top"},pickContent_disabled:{opacity:".65"},choiceContent:{justifyContent:"flex-start",cursor:"inherit"},choiceLabel:{color:"inherit",cursor:"inherit"},choiceCheckBox:{color:"inherit",cursor:"inherit"},choiceLabel_disabled:{opacity:".65"},label_floating_lifted:{opacity:".65",transform:"scale(.85) translateY(-.5rem) translateX(.15rem)"},picks_floating_lifted:{paddingTop:"1.625rem",paddingLeft:"0.8rem",paddingBottom:"0"},warning:{paddingLeft:".25rem",paddingRight:".25rem",zIndex:4,fontSize:"small",backgroundColor:"var(--bs-warning)"}};function De(e){return!0===e||!1===e}function Ae(e,t){for(var n in t)void 0===e[n]&&(e[n]=t[n])}function ke(e){var t={};for(var n in e){var i=e[n];null!=i&&(t[n]=i)}for(var o=arguments.length,r=new Array(o>1?o-1:0),c=1;c<o;c++)r[c-1]=arguments[c];return r&&r.forEach((function(e){for(var n in e){var i=e[n];null!=i?t[n]=i:t.hasOwnProperty(n)&&delete t[n]}})),t}function Ee(e,t){t&&!1!==e(t.value)&&Ee(e,t.prev)}function Pe(e,t){if(!t.prev)return e;Pe(++e,t.prev)}function we(){var e=null,t=0;return{add:function(n){e?(e.next={value:n,prev:e,next:null},e=e.next):e={value:n,prev:null,next:null},t++;var i=e;return{remove:function(){i.prev&&(i.prev.next=i.next),i.next&&(i.next.prev=i.prev),e==i&&(e=i.prev),t--},index:function(){return Pe(0,i)}}},forEach:function(t){Ee(t,e)},getTail:function(){return e?e.value:null},getCount:function(){return t},isEmpty:function(){return 0==t},reset:function(){e=null,t=0}}}function Se(e,t,n,i){var o=null,r=null,c=0;return{add:function(n,a){if(r)if(a){a===o&&(o=n);var s=e(a);i(n,a),t(a,n),s?(t(n,s),i(s,n)):t(n,null)}else t(n,r),i(n,null),i(r,n),r=n;else o=r=n,t(n,null),i(n,null);c++},remove:function(a){var s=n(a),u=e(a);u&&i(u,s),s&&t(s,u),r==a&&(r=u),o==a&&(o=s),c--},getHead:function(){return o},getTail:function(){return r},getCount:function(){return c},isEmpty:function(){return 0==c},reset:function(){r=o=null,c=0}}}function Le(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return function(){return t.forEach((function(e){e&&e()}))}}function Oe(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];for(var i=0,o=t;i<o.length;i++){var r=o[i];if(r){if(!(r instanceof Function))return r;var c=r();if(c)return c}}}function xe(e){var t=we(),n=e();return{getValue:function(){return n},call:function(){n=e(),t.forEach((function(e){return e(n)}))},attach:function(e){return t.add(e)},detachAll:function(){t.reset()}}}function He(e){var t=[];for(var n in e)t.push(e[n]);return t}function Ie(e){var t=e.staticDom,n=e.filterDom,i=e.getLabelElementAspect,o=e.configuration,r=e.loadAspect,c=e.disposeAspect,a=function(e,t,n,i,o){return{update:function(){var r=null,c=e.selectElement,a=e.containerElement,s=t.filterInputElement;r=c?function(){return n+"-generated-input-"+(c.id?c.id:c.name).toLowerCase()+"-id"}:function(){return n+"-generated-filter-"+a.id};var u=i.getLabelElement();if(u){var l=u.getAttribute("for"),d=r();s.setAttribute("id",d),u.setAttribute("for",d),l&&(o.dispose=Le(o.dispose,(function(){return u.setAttribute("for",l)})))}}}}(t,n,o.containerClass,i,c);e.labelForAttributeAspect=a,r.load=Le(r.load,(function(){return a.update()}))}function Me(e){var t=e.configuration,n=e.rtlAspect,i=e.staticDom,o=t.isRtl,r=!1;De(o)?r=!0:o=function(e){var t=!1;return function(e,t,n){return he(e,(function(e){return"rtl"===e.getAttribute("dir")}))}(e)&&(t=!0),t}(i.initialElement);var c,a=(c=[],{set:function(e,t,n){var i=e.getAttribute(t);c.push({element:e,currentAtribute:i,attribute:n}),e.setAttribute(t,n)},restore:function(){c.forEach((function(e){var t=e.element,n=e.attributeName,i=e.attribute;n?t.setAttribute(n,i):t.removeAttribute(n)}))}});if(r)a.set(i.containerElement,"dir","rtl");else if(i.selectElement){var s=i.selectElement.getAttribute("dir");s&&a.set(i.containerElement,"dir",s)}return{buildApi:function(e){n.updateRtl(o)},dispose:function(){a.restore()}}}function Fe(e){var t=e.configuration,n=e.triggerAspect,i=e.onChangeAspect,o=e.optionsAspect,r=e.staticDom,c=e.filterDom,a=e.updateDataAspect,s=t.getIsValueMissing,u=t.valueMissingMessage,l=t.required,d=t.getValueRequired;De(l)||(l=d()),u=Oe(u,(function(){return fe(r.initialElement,"bsmultiselect","value-missing-message")}),"Please select an item in the list"),s||(s=function(){for(var e=0,t=o.getOptions(),n=0;n<t.length;n++)t[n].selected&&e++;return 0===e});var p,f,h=xe((function(){return l&&s()})),g=(p=!h.getValue(),f=we(),{getValue:function(){return p},setValue:function(e){p=e,f.forEach((function(t){return t(e)}))},attach:function(e){return f.add(e)},detachAll:function(){f.reset()}});i.onChange=Le(h.call,i.onChange),a.updateData=Le(h.call,a.updateData),e.validationApiPluginData={validationApiObservable:g};var m=function(e,t,n,i,o){var r="",c="",a=null;function s(t,o){a=function(e,t){return Object.freeze({valueMissing:e,customError:t,valid:!(e||t)})}(t,o),c=o?r:t?n:"",e.setCustomValidity(c),i(a.valid)}s(t.getValue(),!1),t.attach((function(e){s(e,a.customError)}));var u=function(){return a.valid||o("dashboardcode.multiselect:invalid"),a.valid};return{validationMessage:c,willValidate:!0,validity:a,setCustomValidity:function(e){r=e,s(a.valueMissing,!!r)},checkValidity:u,reportValidity:function(){return e.reportValidity(),u()}}}(c.filterInputElement,h,u,(function(e){return g.setValue(e)}),n.trigger);return{buildApi:function(e){e.validationApi=m},dispose:function(){h.detachAll(),g.detachAll()}}}function Be(e,t){var n={classes:[],styles:{}};if(t){var i=t.classes,o=t.styles;for(var r in i.forEach((function(t){return e.classList.add(t)})),n.classes=i.slice(),o)n.styles[r]=e.style[r],e.style[r]=o[r]}return n}function _e(e,t){if(t){var n=t.classes,i=t.styles;for(var o in n.forEach((function(t){return e.classList.remove(t)})),i)e.style[o]=i[o]}}function Ve(e,t){var n={classes:[],styles:{}},i=!1,o=t instanceof Function;return function(r,c){r?!1===i?(n=Be(e,o?t():t),i=!0):c&&(_e(e,n),n=Be(e,o?t():t)):!0!==i&&!0!==c||(_e(e,n),i=!1)}}function Te(e,t,n,i,o){if((c=t)instanceof String||"string"==typeof c){if(""===t)o&&(e.classes=[]);else{var r=t.split(" ");e.classes=n(r)}return!0}return t instanceof Array&&(0==t.length?o&&(e.classes=[]):e.classes=i(t),!0);var c}function Ne(e,t,n,i,o,r){if(!1===Te(e,t,n,i,r)&&t instanceof Object){var c=t.classes,a=t.styles;Te(e,c,n,i,r),a?e.styles=o(a):c||(e.styles=o(t))}}function Re(e){var t={classes:[],styles:{}};return e&&Ne(t,e,(function(e){return e}),(function(e){return e.slice()}),(function(e){return ke(e)}),!0),Object.freeze(t)}function We(e,t){var n={classes:[],styles:{}};if(t){Ne(n,t,(function(e){return e}),(function(e){return e.slice()}),(function(e){return ke(e)}),!0);for(var i=arguments.length,o=new Array(i>2?i-2:0),r=2;r<i;r++)o[r-2]=arguments[r];if(o){var c=n.classes,a=n.styles,s=e?function(e){return Ne(n,e,(function(e){return e}),(function(e){return e.slice()}),(function(e){return ke(a,e)}),!0)}:function(e){return Ne(n,e,(function(e){return c.concat(e)}),(function(e){return c.concat(e)}),(function(e){return ke(a,e)}),!1)};o.forEach((function(e){return s(e)}))}}return Re(n)}function je(e,t){var n={};for(var i in e){var o=e[i],r=t?t[i]:void 0;n[i]=void 0===r?Re(o):We(!0,o,r)}if(t)for(var c in t)e[c]||(n[c]=Re(t[c]));return n}function qe(e){var t,n=e.configuration,i=e.validationApiPluginData,o=e.picksDom,r=e.staticDom,c=e.getLabelElementAspect,a=e.updateAppearanceAspect,s=e.componentPropertiesAspect,u=e.floatingLabelAspect,l=n.getValidity,d=n.getSize,p=n.useCssPatch,f=n.css,h=n.composeGetSize,g=n.getDefaultLabel,m=r.selectElement,v=r.initialElement,b=!1;if(u&&(b=de(v,"form-floating"),u.isFloatingLabel=function(){return b}),c){var y=c.getLabelElement;c.getLabelElement=function(){return y()||(m?g(m):void 0)}}if(r.selectElement?(l||(l=function(e){return function(){return!e.classList.contains("is-invalid")&&(!!e.classList.contains("is-valid")||null)}}(m)),d||(d=h(m))):(l||(l=function(){return null}),d||(d=function(){return null})),s.getSize=d,s.getValidity=l,p){var C=f.picks_lg,D=f.picks_sm,A=f.picks_def,k=f.picks_floating_def;b&&(C=D=A=k),t=function(){return function(e,t,n,i,o){!function(e,t,n,i,o){Ue(e,o),function(e,t,n,i,o){Be(e,"lg"==o?t:"sm"==o?n:i)}(e,t,n,i,o)}(e,t,n,i,o())}(o.picksElement,C,D,A,d)}}else t=function(){return function(e,t){Ue(e,t())}(o.picksElement,d)};if(p){var E=o.toggleFocusStyling;o.toggleFocusStyling=function(){var e=L.getValue(),t=o.getIsFocusIn();E(t),t&&(!1===e?(o.setIsFocusIn(t),Be(o.picksElement,f.picks_focus_invalid)):!0===e&&(o.setIsFocusIn(t),Be(o.picksElement,f.picks_focus_valid)))}}var P=xe((function(){return!!de(r.initialElement,"was-validated")})),w=xe((function(){return l()})),S=null==i?void 0:i.validationApiObservable,L=xe((function(){return P.getValue()?S.getValue():w.getValue()}));return L.attach((function(e){var t=function(e){var t=function(e){var t=[];if(e.parentNode){var n=e.parentNode.children,i=e.parentNode.children.length;if(n.length>1)for(var o=0;o<i;++o){var r=n[o];r!=e&&t.push(r)}}return t}(e),n=t.filter((function(e){return e.classList.contains("invalid-feedback")||e.classList.contains("invalid-tooltip")}));return{validMessages:t.filter((function(e){return e.classList.contains("valid-feedback")||e.classList.contains("valid-tooltip")})),invalidMessages:n}}(r.containerElement),n=t.validMessages,i=t.invalidMessages;!function(e,t,n,i){!1===i?(e.classList.add("is-invalid"),e.classList.remove("is-valid"),n.map((function(e){return e.style.display="block"})),t.map((function(e){return e.style.display="none"}))):!0===i?(e.classList.remove("is-invalid"),e.classList.add("is-valid"),n.map((function(e){return e.style.display="none"})),t.map((function(e){return e.style.display="block"}))):(e.classList.remove("is-invalid"),e.classList.remove("is-valid"),n.map((function(e){return e.style.display=""})),t.map((function(e){return e.style.display=""})))}(o.picksElement,n,i,e),o.toggleFocusStyling()})),P.attach((function(){return L.call()})),S&&S.attach((function(){return L.call()})),w.attach((function(){return L.call()})),a.updateAppearance=Le(a.updateAppearance,t,L.call,w.call),{buildApi:function(e){e.updateSize=t,e.updateValidity=function(){return w.call()},e.updateWasValidated=function(){return P.call()}},dispose:function(){P.detachAll(),L.detachAll(),w.detachAll()}}}function Ue(e,t){"lg"==t?(e.classList.add("form-control-lg"),e.classList.remove("form-control-sm")):"sm"==t?(e.classList.remove("form-control-lg"),e.classList.add("form-control-sm")):(e.classList.remove("form-control-lg"),e.classList.remove("form-control-sm"))}function ze(e){e.updateSelected=function(){},e.choice.isChoiceElementAttached=!1,e.choice.choiceElement=null,e.choice.choiceElementAttach=null,e.choice.setVisible=null,e.choice.setHoverIn=null,e.choice.remove=null,e.choice.dispose=function(){e.choice.dispose=null},e.dispose=function(){e.choice.dispose(),e.dispose=null}}function Ge(e,t,n,i,o,r){var c=o(e.option);if(c!=e.isOptionHidden)if(e.isOptionHidden=c,e.isOptionHidden)i.remove(e),e.choice.remove(),ze(e);else{var a=n(t);i.add(e,a),r.buildChoice(e),e.choice.choiceElementAttach(null==a?void 0:a.choice.choiceElement)}}function Ke(){}function Xe(e){var t,n,i=e.configuration,o=e.staticManager,r=e.picksList,c=e.picksDom,a=e.filterDom,s=e.staticDom,u=e.updateDataAspect,l=e.resetFilterListAspect,d=e.filterManagerAspect,p=e.environment.isIE11,f=i.placeholder,h=i.css,g=c.picksElement,m=a.filterInputElement;function v(e){m.placeholder=e}if(p){var b=(n=!1,{get:function(){return n},set:function(){n=!0},reset:function(){n=!1}}),y=(t=b,{get:function(){return t.get()},reset:function(){return t.reset()}}),C=v;v=function(e){b.set(),C(e)},e.placeholderStopInputAspect=y}function D(e){m.style.width=e?"100%":"2ch"}f||(f=fe(s.initialElement,"bsmultiselect","placeholder"));var A=Ve(m,h.filterInput_empty);function k(e){e?(v(f||""),g.style.display="block"):(v(""),g.style.display="flex"),A(e),D(e)}k(!0);var E=function(){return r.isEmpty()&&a.isEmpty()};function P(){k(E())}function w(){D(E())}var S=c.disable;c.disable=function(e){!function(e){m.disabled=e}(e),S(e)},o.appendToContainer=Le(o.appendToContainer,w),d.processEmptyInput=Le(w,d.processEmptyInput),l.forceResetFilter=Le(l.forceResetFilter,P);var L=r.add;r.add=function(e){var t=L(e);return 1==r.getCount()&&(a.isEmpty()?(v(""),g.style.display="flex",A(!1),m.style.width="2ch"):g.style.display="flex"),e.dispose=Le(e.dispose,(function(){E()&&k(!0)})),t},u.updateData=Le(u.updateData,P)}function Ye(e){var t=e.staticDom,n=e.choicesDom,i=e.filterDom,o=e.picksList,r=e.picksDom;return{buildApi:function(e){e.getContainer=function(){return t.containerElement},e.getChoices=function(){return n.choicesElement},e.getChoicesList=function(){return n.choicesListElement},e.getFilterInput=function(){return i.filterInputElement},e.getPicks=function(){return r.picksElement},e.picksCount=function(){return o.getCount()}}}}function $e(e){var t=e.buildAndAttachChoiceAspect,n=e.wraps,i=e.wrapsCollection,o=e.createWrapAspect,r=e.createChoiceBaseAspect,c=e.optionsAspect,a=e.resetLayoutAspect;return{buildApi:function(e){e.updateOptionAdded=function(e){var a=c.getOptions()[e],s=o.createWrap(a);s.choice=r.createChoiceBase(a),n.insert(e,s),t.buildAndAttachChoice(s,(function(){var t;return null==(t=i.getNext(e,(function(e){return e.choice.choiceElement})))?void 0:t.choice.choiceElement}))},e.updateOptionRemoved=function(e){a.resetLayout();var t=n.remove(e);null==t.choice.remove||t.choice.remove(),null==t.dispose||t.dispose()}}}}function Je(e){var t=e.loadAspect,n=e.environment,i=t.loop,o=n.window.document;t.loop=function(){"loading"!=o.readyState?i():o.addEventListener("DOMContentLoaded",(function e(){i(),o.removeEventListener("DOMContentLoaded",e)}))}}function Qe(e){var t=e.configuration,n=e.wrapsCollection,i=e.updateOptionsSelectedAspect,o=e.createWrapAspect,r=e.buildChoiceAspect,c=e.removePickAspect,a=e.resetLayoutAspect,s=e.picksList,u=e.isChoiceSelectableAspect,l=e.optionToggleAspect,d=e.createPickHandlersAspect,p=e.addPickAspect,f=e.fullMatchAspect,h=e.onChangeAspect,g=e.filterPredicateAspect,m=t.getSelected,v=t.setSelected,b=g.filterPredicate;g.filterPredicate=function(e,t){return!e.isOptionSelected&&b(e,t)};var y=r.buildChoice;function C(e,t){return function(){e.isOptionSelected=t,e.updateSelected()}}function D(e,t,n){var i=!1;return!1!==v(e,n)&&(t(),i=!0),i}r.buildChoice=function(e){y(e),e.updateSelected=function(){e.choice.choiceDomManagerHandlers.updateSelected(),h.onChange()},e.dispose=Le((function(){e.updateSelected=null}),e.dispose)};var A=o.createWrap;o.createWrap=function(e){var t=A(e);return t.isOptionSelected=m(e),t.updateSelected=null,t},l.toggle,l.toggle=function(e){return D(e.option,C(e,!e.isOptionSelected),!e.isOptionSelected)},f.fullMatch,f.fullMatch=function(e){return D(e.option,C(e,!0),!0)},c.removePick,c.removePick=function(e,t){return D(e.option,C(e,!1),!1)};var k=d.createPickHandlers;d.createPickHandlers=function(e){var t=k(e);return e.updateSelected=Le((function(){if(e.isOptionSelected){var n=t.producePick();e.pick=n,n.dispose=Le(n.dispose,(function(){e.pick=null}))}else t.removeAndDispose(),t.removeAndDispose=null}),e.updateSelected),p.addPick(e,t),t};var E=p.addPick;return p.addPick=function(e,t){if(e.isOptionSelected){var n=E(e,t);return e.pick=n,n.dispose=Le(n.dispose,(function(){e.pick=null})),n}},{buildApi:function(e){e.selectAll=function(){a.resetLayout(),n.forLoop((function(e){u.isSelectable(e)&&!e.isOptionSelected&&D(e.option,C(e,!0),!0)}))},e.deselectAll=function(){a.resetLayout(),s.forEach((function(e){return e.setSelectedFalse()}))},e.setOptionSelected=function(e,t){var i=n.get(e);return D(i.option,C(i,t),t)},e.updateOptionsSelected=function(){return i.updateOptionsSelected()},e.updateOptionSelected=function(e){return Ze(n.get(e),m)}}}}function Ze(e,t){var n=t(e.option);n!=e.isOptionSelected&&(e.isOptionSelected=n,null==e.updateSelected||e.updateSelected())}function et(e,t){var n=t(e.option);n!=e.isOptionDisabled&&(e.isOptionDisabled=n,null==e.updateDisabled||e.updateDisabled())}function tt(e){var t=e.picksList,n=e.createWrapAspect,i=e.createPickHandlersAspect,o=e.addPickAspect;return{buildApi:function(e){e.forEachPeak=function(e){return t.forEach((function(t){return e(t.option)}))},e.getTailPeak=function(){var e;return null==(e=t.getTail())?void 0:e.option},e.countPeaks=function(){return t.getCount()},e.isEmptyPeaks=function(){return t.isEmpty()},e.addPick=function(e){var t=n.createWrap(e);t.updateDisabled=function(){},t.updateHidden=function(){};var r=i.createPickHandlers(t);o.addPick(t,r)}}}}function nt(e){var t=e.configuration;e.inputAspect,e.filterDom,e.filterManagerAspect,t.picks,t.addOptionPicked}function it(e){var t,n=e.environment,i=n.createPopper,o=n.Popper,r=n.globalPopper,c=null,a=null;if(o)t=o,a=i=function(e,n,i){return new t(e,n,i)},c=ot;else if(i)a=i,c=rt;else{if(!r)throw new Error("BsMultiSelect: Popper component (https://popper.js.org) is required");r.createPopper?(a=r.createPopper,c=rt):(a=i=function(e){return function(t,n,i){return new e(t,n,i)}}(r),c=ot)}e.createPopperAspect=function(e,t){return{createPopper:function(n,i,o){var r={placement:"bottom-start",modifiers:t(o)},c=null;return{init:function(){c=e(i,n,r)},update:function(){c.update()},setRtl:function(e){e&&(r.placement="bottom-end")},dispose:function(){c.destroy()}}}}}(a,c)}function ot(e){return{preventOverflow:{enabled:e},hide:{enabled:!1},flip:{enabled:!1}}}function rt(e){var t=[{name:"flip",options:{fallbackPlacements:["bottom"]}}];return e&&t.push({name:"preventOverflow"}),t}function ct(e){var t=e.configuration,n=e.picksList,i=e.picksDom,o=e.filterDom,r=e.staticDom,c=e.updateDataAspect,a=e.resetFilterListAspect,s=e.floatingLabelAspect,u=t.css,l=t.getDefaultLabel,d=r.initialElement;if(s.isFloatingLabel()){var p=function(){!function(e){g(e),m(e)}(!v())},f=l(d),h=i.picksElement,g=Ve(f,u.label_floating_lifted),m=Ve(h,u.picks_floating_lifted),v=function(){return n.isEmpty()&&o.isEmpty()&&!i.getIsFocusIn()};p(),a.forceResetFilter=Le(a.forceResetFilter,p);var b=n.add;n.add=function(e){var t=b(e);return 1==n.getCount()&&p(),e.dispose=Le(e.dispose,(function(){0==n.getCount()&&p()})),t};var y=i.toggleFocusStyling;i.toggleFocusStyling=function(){var e=i.getIsFocusIn();y(e),p()},c.updateData=Le(c.updateData,p)}}function at(e){if(e.configuration.useChoicesDynamicStyling){var t=e.choicesVisibilityAspect,n=e.specialPicksEventsAspect,i=t.setChoicesVisible;e.choicesVisibilityAspect.setChoicesVisible=function(t){t&&st(e),i(t)};var o=n.backSpace;n.backSpace=function(t){o(t),st(e)}}}function st(e){var t=e.configuration,n=e.environment,i=e.choicesDom,o=e.navigateAspect,r=n.window,c=i.choicesElement,a=t.minimalChoicesDynamicStylingMaxHeight,s=r.document.getElementsByTagName("body")[0],u=r.document.documentElement,l=(r.innerHeight||u.clientHeight||s.clientHeight)-c.parentNode.getBoundingClientRect().top,d=Math.max(a,Math.round(.85*l));if(c.style.setProperty("max-height",d+"px"),c.style.setProperty("overflow-y","auto"),!i.ChoicesDynamicStylingPlugin_scrollHandle){i.ChoicesDynamicStylingPlugin_scrollHandle=!0;var p=o.navigate;o.navigate=function(e){var t=p(e);return null!=t&&null!=t.choice&&null!=t.choice.choiceElement&&t.choice.choiceElement.scrollIntoView(!1),t}}}function ut(e){var t=e.configuration,n=e.choicesDom,i=e.createElementAspect,o=e.staticManager,r=t.css;t.isNoResultsWarningEnabled&&(e.warningAspect=function(e,t,n,i){var o=e.choicesElement,r=t.createElement("DIV"),c=n.appendToContainer;return n.appendToContainer=function(){c(),o.parentNode.insertBefore(r,o.nextSibling)},r.style.display="none",Be(r,i.warning),{warningElement:r,show:function(e){r.style.display="block",r.innerHTML=e},hide:function(){r.style.display="none",r.innerHTML=""}}}(n,i,o,r))}function lt(e){var t=e.highlightAspect,n=e.filterManagerAspect,i=e.buildChoiceAspect;if(t){var o=n.processEmptyInput;n.processEmptyInput=function(){t.reset(),o()};var r=n.setFilter;n.setFilter=function(e){t.set(e),r(e)};var c=i.buildChoice;i.buildChoice=function(e){c(e);var t=e.choice.setVisible;e.choice.setVisible=function(n){t(n),e.choice.choiceDomManagerHandlers.updateHighlighted()}}}}function dt(e){var t,n=e.configuration,i=e.choiceDomFactory,o=(t=n.customChoiceStylings,{customize:function(e,n,i){if(t){var o=t(n,e.option);if(o){var r=function(t){return function(){t({isOptionSelected:e.isOptionSelected,isOptionDisabled:e.isOptionDisabled,isHoverIn:e.choice.isHoverIn})}};i.updateHoverIn&&o.updateHoverIn&&(i.updateHoverIn=Le(i.updateHoverIn,r(o.updateHoverIn))),i.updateSelected&&o.updateSelected&&(i.updateSelected=Le(i.updateSelected,r(o.updateSelected))),i.updateDisabled&&o.updateDisabled&&(i.updateDisabled=Le(i.updateDisabled,r(o.updateDisabled))),i.updateHighlighted&&o.updateHighlighted&&(i.updateHighlighted=Le(i.updateHighlighted,r(o.updateHighlighted)))}}}}),r=i.create;i.create=function(e,t,n){var i=r(e,t,n);return o.customize(t,i.choiceDom,i.choiceDomManagerHandlers),i}}function pt(e){var t=e.componentPropertiesAspect,n=e.configuration,i=e.pickDomFactory,o=function(e,t){return{customize:function(n,i,o){if(t){var r=t(i,n.option);if(r){var c=function(t){return function(){t({isOptionDisabled:n.isOptionDisabled,isComponentDisabled:e.getDisabled()})}};o.updateDisabled&&r.updateDisabled&&(o.updateDisabled=Le(o.updateDisabled,c(r.updateDisabled))),o.updateComponentDisabled&&r.updateComponentDisabled&&(o.updateComponentDisabled=Le(o.updateComponentDisabled,c(r.updateComponentDisabled)))}}}}}(t,n.customPickStylings),r=i.create;i.create=function(e,t,n){var i=r(e,t,n);return o.customize(t,i.pickDom,i.pickDomManagerHandlers),i}}function ft(e){var t=e.updateAppearanceAspect,n=e.updateAspect,i=e.loadAspect;return n.update=Le(n.update,(function(){return t.updateAppearance()})),i.load=Le(i.load,(function(){return t.updateAppearance()})),{buildApi:function(e){e.updateAppearance=function(){return t.updateAppearance()}}}}function ht(e){var t,n=e.updateAppearanceAspect,i=e.picksList,o=e.picksDom,r=e.componentPropertiesAspect,c=function(e,t){return{disableComponent:function(n){e.forEach((function(e){return e.pickDomManagerHandlers.updateComponentDisabled()})),t.disable(n)}}}(i,o);function a(){var e=r.getDisabled();t!==e&&(t=e,c.disableComponent(e))}return e.disableComponentAspect=c,n.updateAppearance=Le(n.updateAppearance,a),{buildApi:function(e){e.updateDisabled=a}}}Ie.plugDefaultConfig=function(e){e.label=null},Ie.plugStaticDom=function(e){var t;e.getLabelElementAspect=(t=e.configuration.label,{getLabelElement:function(){Oe(t)}})},Me.plugStaticDom=function(e){e.rtlAspect={updateRtl:function(){}}},Fe.plugDefaultConfig=function(e){e.getValueRequired=function(){return!1},e.valueMissingMessage=""},Ke.plugMergeSettings=function(e,t,n){var i=null==n?void 0:n.cssPatch;if(De(i))throw new Error("BsMultiSelect: 'cssPatch' was used instead of 'useCssPatch'");e.cssPatch=je(t.cssPatch,i)},Ke.plugStaticDom=function(e){var t=e.configuration;t.useCssPatch&&function(e,t){for(var n in t){var i=t[n],o=e[n];e[n]=void 0===o?Re(i):We(!1,o,i)}}(t.css,t.cssPatch)},Je.plugStaticDom=function(e){var t=e.configuration,n=e.staticDomFactory,i=e.createElementAspect,o=e.componentPropertiesAspect,r=e.onChangeAspect,c=e.triggerAspect,a=e.optionsAspect,s=e.optGroupAspect,u=e.disposeAspect,l=n.create;n.create=function(e){var n=l(e),d=n.choicesDom,p=n.createStaticDom,f=d.choicesElement;return{choicesDom:d,createStaticDom:function(e,n){var l=null,d=null,h=null;if("SELECT"==e.tagName)l=e,n&&(d=de(l,n))&&(h=ue(d,"UL"));else if("DIV"==e.tagName){if(!(l=ue(e,"SELECT")))return p(e,n);n&&(d=de(e,n))&&(h=ue(d,"UL"))}var g=!1;d||((d=i.createElement("DIV")).classList.add(n),g=!0);var m=!1;if(h||(h=i.createElement("UL"),m=!0),l){var v=l.style.display;l.style.display="none";var b=l.required;if(t.getValueRequired=function(){return b},!0===l.required&&(l.required=!1),!t.getDisabled){var y=le(l,"FIELDSET");o.getDisabled=y?function(){return l.disabled||y.disabled}:function(){return l.disabled}}r.onChange=Le((function(){return c.trigger("change")}),r.onChange),a.getOptions=function(){return l.options},s&&(s.getOptionOptGroup=function(e){return e.parentNode},s.getOptGroupText=function(e){return e.label},s.getOptGroupId=function(e){return e.id}),u.dispose=Le(u.dispose,(function(){l.required=b,l.style.display=v}))}return{staticDom:{initialElement:e,containerElement:d,picksElement:h,isDisposablePicksElement:m,selectElement:l},staticManager:{appendToContainer:function(){g?(l.parentNode.insertBefore(d,l.nextSibling),d.appendChild(f)):l.parentNode.insertBefore(f,l.nextSibling),m&&d.appendChild(h)},dispose:function(){f.parentNode.removeChild(f),g&&l.parentNode.removeChild(d),m&&d.removeChild(h)}}}}}}},Qe.plugStaticDom=function(e){var t=e.configuration,n=e.wrapsCollection,i=t.getSelected,o=t.setSelected;t.options?(o||(o=function(e,t){e.selected=t}),i||(i=function(e){return e.selected})):(i||(i=function(e){return e.selected}),o||(o=function(e,t){e.selected=t})),t.getSelected=i,t.setSelected=o,e.updateOptionsSelectedAspect=function(e,t){return{updateOptionsSelected:function(){e.forLoop((function(e){return Ze(e,t)}))}}}(n,i)},nt.plugStaticDom=function(e){var t=e.configuration,n=e.picksList,i=t.picks;if(i){var o=n.add,r=n.reset;n.add=function(e){var t=o(e),n=t.remove,r=t.index;return i.push(e),{remove:Le(n,(function(){i.splice(r(),1)})),index:r}},n.reset=function(){r(),i.length=0}}},ct.plugStaticDom=function(e){e.floatingLabelAspect={isFloatingLabel:function(){}}},at.plugDefaultConfig=function(e){e.useChoicesDynamicStyling=!1,e.choicesDynamicStyling=st,e.minimalChoicesDynamicStylingMaxHeight=20},ut.plugDefaultConfig=function(e){e.noResultsWarning="No results found",e.isNoResultsWarningEnabled=!1},lt.plugStaticDom=function(e){var t;e.configuration.useHighlighting&&(e.highlightAspect=(t=null,{getHighlighter:function(){return t},set:function(e){var n=e.replace(/[.*+?^${}()|[\]\\]/g,"\\$&"),i=new RegExp("("+n+")","gi");t=function(e,t,n){e.innerHTML=n.replace(i,"<u>$1</u>")}},reset:function(){t=null}}))},lt.plugDefaultConfig=function(e){e.useHighlighting=!1},dt.plugDefaultConfig=function(e){e.customChoiceStylings=null},pt.plugDefaultConfig=function(e){e.customPickStylings=null},ft.plugStaticDom=function(e){e.updateAppearanceAspect={updateAppearance:function(){}}};var gt={CssPatchPlugin:Ke,SelectElementPlugin:Je,LabelForAttributePlugin:Ie,HiddenOptionPlugin:function(e){var t=e.configuration,n=e.createWrapAspect,i=e.isChoiceSelectableAspect,o=e.wrapsCollection,r=e.buildChoiceAspect,c=e.buildAndAttachChoiceAspect,a=e.countableChoicesListInsertAspect,s=e.countableChoicesList;a.countableChoicesListInsert=function(e,t){if(!e.isOptionHidden){var n=o.getNext(t,(function(e){return!e.isOptionHidden}));s.add(e,n)}};var u=c.buildAndAttachChoice;c.buildAndAttachChoice=function(e,t){e.isOptionHidden?ze(e):u(e,t)};var l=i.isSelectable;i.isSelectable=function(e){return l(e)&&!e.isOptionHidden};var d=t.getIsOptionHidden;t.options?d||(d=function(e){return void 0!==e.hidden&&e.hidden}):d||(d=function(e){return e.hidden});var p=n.createWrap;return n.createWrap=function(e){var t=p(e);return t.isOptionHidden=d(e),t},{buildApi:function(e){var t=function(e){return o.getNext(e,(function(e){return!e.isOptionHidden}))};e.updateOptionsHidden=function(){return o.forLoop((function(e,n){return Ge(e,n,t,s,d,r)}))},e.updateOptionHidden=function(e){return Ge(o.get(e),e,t,s,d,r)}}}},ValidationApiPlugin:Fe,UpdateAppearancePlugin:ft,BsAppearancePlugin:qe,DisableComponentPlugin:ht,FormResetPlugin:function(e){var t=e.staticDom,n=e.updateDataAspect,i=e.environment,o=ge();if(t.selectElement){var r=le(t.selectElement,"FORM");r&&o.bind(r,"reset",(function(){return i.window.setTimeout((function(){return n.updateData()}))}))}return{dispose:function(){o.unbind()}}},CreatePopperPlugin:it,WarningPlugin:ut,RtlPlugin:Me,PlaceholderPlugin:Xe,FloatingLabelPlugin:ct,OptionsApiPlugin:$e,JQueryMethodsPlugin:Ye,SelectedOptionPlugin:Qe,FormRestoreOnBackwardPlugin:function(e){var t=e.staticDom,n=e.environment,i=e.loadAspect,o=e.updateOptionsSelectedAspect,r=n.window;t.selectElement&&o&&(i.load=Le(i.load,(function(){"complete"!=r.document.readyState&&r.setTimeout((function(){o.updateOptionsSelected()}))})))},DisabledOptionPlugin:function(e){var t=e.configuration,n=e.isChoiceSelectableAspect,i=e.createWrapAspect,o=e.buildChoiceAspect,r=e.filterPredicateAspect,c=e.wrapsCollection,a=e.optionToggleAspect,s=e.buildPickAspect,u=t.getIsOptionDisabled;t.options?u||(u=function(e){return void 0!==e.disabled&&e.disabled}):u||(u=function(e){return e.disabled});var l=i.createWrap;i.createWrap=function(e){var t=l(e);return t.isOptionDisabled=u(e),t.updateDisabled=null,t};var d=a.toggle;a.toggle=function(e){var t=!1;return void 0!==e.isOptionSelected?!e.isOptionSelected&&e.isOptionDisabled||(t=d(e)):e.isOptionDisabled||(t=d(e)),t};var p=n.isSelectable;n.isSelectable=function(e){return p(e)&&!e.isOptionDisabled};var f=r.filterPredicate;r.filterPredicate=function(e,t){return!e.isOptionDisabled&&f(e,t)};var h=o.buildChoice;o.buildChoice=function(e){h(e),e.updateDisabled=e.choice.choiceDomManagerHandlers.updateDisabled,e.choice.dispose=Le((function(){e.updateDisabled=null}),e.choice.dispose)};var g=s.buildPick;return s.buildPick=function(e,t){var n=g(e,t);n.updateDisabled=function(){return n.pickDomManagerHandlers.updateDisabled()},n.dispose=Le(n.dispose,(function(){n.updateDisabled=null}));var i=e.updateDisabled;return e.updateDisabled=Le(i,n.updateDisabled),n.dispose=Le(n.dispose,(function(){e.updateDisabled=i,e.updateDisabled()})),n},{buildApi:function(e){e.updateOptionsDisabled=function(){return c.forLoop((function(e){return et(e,u)}))},e.updateOptionDisabled=function(e){return et(c.get(e),u)}}}},PicksApiPlugin:tt,HighlightPlugin:lt,ChoicesDynamicStylingPlugin:at,CustomPickStylingsPlugin:pt,CustomChoiceStylingsPlugin:dt},mt={CssPatchPlugin:Ke,PicksPlugin:nt,LabelForAttributePlugin:Ie,ValidationApiPlugin:Fe,UpdateAppearancePlugin:ft,BsAppearancePlugin:qe,DisableComponentPlugin:ht,CreatePopperPlugin:it,WarningPlugin:ut,RtlPlugin:Me,PlaceholderPlugin:Xe,FloatingLabelPlugin:ct,OptionsApiPlugin:$e,JQueryMethodsPlugin:Ye,PicksApiPlugin:tt,HighlightPlugin:lt,ChoicesDynamicStylingPlugin:at,CustomPickStylingsPlugin:pt,CustomChoiceStylingsPlugin:dt},vt=ke(gt,{PicksPlugin:nt}),bt={composeSync:Le,EventBinder:ge,addStyling:Be,toggleStyling:Ve};function yt(e,t,n){return{navigate:function(i,o){return i?o?n(o):e.getHead():o?t(o):e.getTail()},getCount:function(){return e.getCount()},getHead:function(){return e.getHead()}}}function Ct(e,t,n){t.push(e),n(e)}function Dt(e){var t=e.environment,n=e.filterDom,i=e.picksDom,o=e.choicesDom,r=e.choicesVisibilityAspect,c=e.hoveredChoiceAspect,a=e.navigateAspect,s=e.filterManagerAspect,u=e.focusInAspect,l=e.optionToggleAspect,d=e.createPickHandlersAspect,p=e.picksList,f=e.inputAspect,h=e.specialPicksEventsAspect,g=e.buildChoiceAspect,m=e.disableComponentAspect,v=e.resetLayoutAspect,b=e.placeholderStopInputAspect,y=e.warningAspect,C=e.configuration,D=e.createPopperAspect,A=e.rtlAspect,k=e.staticManager,E=i.picksElement,P=o.choicesElement,w=n.filterInputElement,S=D.createPopper(P,w,!0);k.appendToContainer=Le(k.appendToContainer,S.init);var L=h.backSpace;if(h.backSpace=function(e){L(e),S.update()},A){var O=A.updateRtl;A.updateRtl=function(e){O(e),S.setRtl(e)}}if(r.updatePopupLocation=Le(r.updatePopupLocation,(function(){S.update()})),y){var x=D.createPopper(y.warningElement,w,!1);if(k.appendToContainer=Le(k.appendToContainer,x.init),A){var H=A.updateRtl;A.updateRtl=function(e){H(e),x.setRtl(e)}}var I=y.show;y.show=function(e){x.update(),I(e)},S.dispose=Le(S.dispose,x.dispose)}var M=t.window,F=M.document,B=function(e){var t=!1,n=null;return{get:function(){return t},set:function(i){t&&n&&e.clearTimeout(n),t=!0,n=e.setTimeout((function(){t=!1,n=null}),i||0)}}}(M),_=!1;function V(){_=!1}var T=function(){_=!0},N=function(e){P==e.target?n.setFocus():pe(P,e.target)||pe(E,e.target)||(v.resetLayout(),u.setFocusIn(!1))};function R(){r.isChoicesVisible()||(r.updatePopupLocation(),B.set(),r.setChoicesVisible(!0),P.scrollTop=0,P.addEventListener("mousedown",T),F.addEventListener("mouseup",N))}function W(){K(),c.resetHoveredChoice(),r.isChoicesVisible()&&(r.setChoicesVisible(!1),P.removeEventListener("mousedown",T),F.removeEventListener("mouseup",N))}var j=null,q=ge();function U(){T(),M.setTimeout((function(){return V()}))}function z(e){n.setFocusIfNotTarget(e.target),j!=e&&(r.isChoicesVisible()?W():s.getNavigateManager().getCount()>0&&R()),j=null}E.addEventListener("mousedown",U);var G=ge(),K=function(){G.unbind()},X=function(e){e.choice.isHoverIn||a.hoverIn(e),K()};function Y(e){var t=a.navigate(e);t&&(B.set(400),a.hoverIn(t),R())}function $(){var e=c.getHoveredChoice();e&&l.toggle(e)&&v.resetLayout()}if(n.onFocusIn((function(){return u.setFocusIn(!0)})),n.onFocusOut((function(){_||(v.resetLayout(),u.setFocusIn(!1)),V()})),n.onInput((function(){if(b&&b.get())b.reset();else{var e=f.processInput(),t=e.filterInputValue;e.isEmpty?s.processEmptyInput():n.setWidth(t),B.set(),function(){var e=s.getNavigateManager().getCount();if(e>0){y&&y.hide();var t=r.isChoicesVisible();t||R(),1==e?a.hoverIn(s.getNavigateManager().getHead()):t&&c.resetHoveredChoice()}else r.isChoicesVisible()&&W(),y&&(s.getFilter()?y.show(C.noResultsWarning):y.hide())}()}})),n.onKeyDown((function(e){var t=e.which,i=n.isEmpty();if(([13,27].indexOf(t)>=0||9==t&&!i)&&e.preventDefault(),[38,40].indexOf(t)>=0&&e.preventDefault(),8==t){if(i){var o=p.getTail();o&&h.backSpace(o)}}else 9==t?i&&W():27==t?i&&!r.isChoicesVisible()||e.stopPropagation():38==t?Y(!1):40==t&&Y(!0)})),n.onKeyUp((function(e){var t=e.which;9==t?r.isChoicesVisible()&&$():13==t?r.isChoicesVisible()?$():s.getNavigateManager().getCount()>0&&R():27==t&&v.resetLayout()})),m){var J=m.disableComponent;m.disableComponent=function(e){J(e),e?q.unbind():q.bind(E,"click",z)}}v.resetLayout=Le(W,(function(){y&&y.hide()}),v.resetLayout);var Q=d.createPickHandlers;d.createPickHandlers=function(e){var t,n=Q(e);return n.removeOnButton=(t=n.removeOnButton,function(e){!function(e,t){M.setTimeout((function(){return e()})),j=t}(t,e),v.resetLayout()}),n};var Z=g.buildChoice;return g.buildChoice=function(e){Z(e);var t=d.createPickHandlers(e);e.choice.remove=Le(e.choice.remove,(function(){t.removeAndDispose&&(t.removeAndDispose(),t.removeAndDispose=null)}));var n=function(e){var t=e.choice.choiceElement,n=ge();return n.bind(t,"mouseover",(function(){B.get()?(K(),G.bind(t,"mousemove",(function(){return X(e)})),G.bind(t,"mousedown",(function(){return X(e)}))):e.choice.isHoverIn||a.hoverIn(e)})),n.bind(t,"mouseleave",(function(){B.get()||c.resetHoveredChoice()})),n.unbind}(e);e.choice.dispose=Le(n,e.choice.dispose)},{dispose:function(){K(),E.removeEventListener("mousedown",U),q.unbind(),S.dispose()}}}function At(e,t,n,i,o){var r,c=t.window;t.isIE11=!!c.MSInputMethodContext&&!!document.documentMode;var a,s,u=i.containerClass,l=i.css,d=i.getDisabled,p=i.options,f=i.getText,h={dispose:function(){}},g=function(e,t){return{trigger:function(n){t(e,n)}}}(e,t.trigger),m=function(e,t){return{onChange:function(){e.trigger("dashboardcode.multiselect:change")}}}(g),v=function(e){return{getDisabled:e}}(null!=d?d:function(){return!1}),b=function(e){return{getOptions:function(){return e}}}(p),y=function(e){return e||(e=function(e){return e.text}),{getText:e}}(f),C={createWrap:function(e){return{option:e}}},D=function(e){return{createChoiceBase:function(t){return{filteredPrev:null,filteredNext:null,searchText:e.getText(t).toLowerCase().trim(),isHoverIn:!1,isFilteredIn:!1,setVisible:null,setHoverIn:null,isChoiceElementAttached:!1,choiceElement:null,choiceDom:null,choiceElementAttach:null,itemPrev:null,itemNext:null,remove:null,dispose:null}}}}(y),A={addPick:function(e,t){return t.producePick()}},k={removePick:function(e,t){t.dispose()}},E={createElement:function(e){return c.document.createElement(e)}},P=function(e){return{create:function(t){var n=e.createElement("DIV"),i=e.createElement("UL");return n.appendChild(i),n.style.display="none",Be(n,t.choices),Be(i,t.choicesList),{choicesElement:n,choicesListElement:i,createChoiceElement:function(){var n=e.createElement("LI");return Be(n,t.choice),{choiceElement:n,setVisible:function(e){return n.style.display=e?"block":"none"},attach:function(e){return i.insertBefore(n,e)},detach:function(){return i.removeChild(n)}}}}}}}(E),w=function(e,t){return{create:function(n){var i=e.create(n);return{choicesDom:i,createStaticDom:function(e,n){function o(t){throw e.style.backgroundColor="red",e.style.color="white",new Error(t)}var r,c,a=!1;"DIV"==e.tagName?((r=e).classList.contains(n)||(r.classList.add(n),a=!0),c=ue(r,"UL")):"UL"==e.tagName?(c=e,(r=de(e,n))||o("BsMultiSelect: defined on UL but precedentant DIV for container not found; class="+n)):"INPUT"==e.tagName&&o("BsMultiSelect: INPUT element is not supported");var s=!1;return c||(c=t.createElement("UL"),s=!0),{choicesDom:i,staticDom:{initialElement:e,containerElement:r,picksElement:c,isDisposablePicksElement:s},staticManager:{appendToContainer:function(){r.appendChild(i.choicesElement),s&&r.appendChild(c)},dispose:function(){r.removeChild(i.choicesElement),a&&r.classList.remove(n),s&&r.removeChild(c)}}}}}}}}(P,E),S=(a=[],{push:function(e){a.push(e)},add:function(e,t){a.splice(t,0,e)},get:function(e){return a[e]},getNext:function(e,t){var n=a.length,i=e+1;if(e<n){if(!t)return a[i];for(var o=i;o<n;o++){var r=a[o];if(t(r))return r}}},remove:function(e){var t=a[e];return a.splice(e,1),t},forLoop:function(e){for(var t=0;t<a.length;t++)e(a[t],t)},getHead:function(){return a[0]},getCount:function(){return a.length},isEmpty:function(){return 0==a.length},reset:function(){a=[]}}),L=Se((function(e){return e.choice.itemPrev}),(function(e,t){return e.choice.itemPrev=t}),(function(e){return e.choice.itemNext}),(function(e,t){return e.choice.itemNext=t})),O=function(e,t){return{countableChoicesListInsert:function(n,i){var o=t.getNext(i);e.add(n,o)}}}(L,S),x=function(e,t){return{forEach:function(n){for(var i=e.getHead();i;)n(i),i=t(i)}}}(L,(function(e){return e.choice.itemNext})),H=Se((function(e){return e.choice.filteredPrev}),(function(e,t){return e.choice.filteredPrev=t}),(function(e){return e.choice.filteredNext}),(function(e,t){return e.choice.filteredNext=t})),I={filterPredicate:function(e,t){return e.choice.searchText.indexOf(t)>=0}},M=function(e,t,n,i,o){var r=!0,c="";return{getNavigateManager:function(){return r?e:t},processEmptyInput:function(){r=!0,c="",i.forEach((function(e){e.choice.setVisible(!0)}))},getFilter:function(){return c},setFilter:function(e){r=!1,c=e,n.reset(),i.forEach((function(t){t.choice.filteredPrev=t.choice.filteredNext=null;var i=o.filterPredicate(t,e);i&&n.add(t),t.choice.setVisible(i)}))}}}(yt(L,(function(e){return e.choice.itemPrev}),(function(e){return e.choice.itemNext})),yt(H,(function(e){return e.choice.filteredPrev}),(function(e){return e.choice.filteredNext})),H,x,I),F=(s=null,{getHoveredChoice:function(){return s},setHoveredChoice:function(e){s=e},resetHoveredChoice:function(){s&&(s.choice.setHoverIn(!1),s=null)}}),B=function(e,t){return{hoverIn:function(t){e.resetHoveredChoice(),e.setHoveredChoice(t),t.choice.setHoverIn(!0)},navigate:function(t){return function(e,t){return M.getNavigateManager().navigate(e,t)}(t,e.getHoveredChoice())}}}(F),_=we(),V=function(e,t,n,i){return{push:function(t){return Ct(t,e,i)},insert:function(t,n){return function(e,t,n,i){e>=n.getCount()?Ct(t,n,i):(n.add(t,e),i(t,e))}(t,n,e,i)},remove:function(t){var i=e.remove(t);return n(i),i},clear:function(){e.reset(),t()},dispose:function(){return e.forLoop((function(e){return e.dispose()}))}}}(S,(function(){return L.reset()}),(function(e){return L.remove(e)}),(function(e,t){return O.countableChoicesListInsert(e,t)})),T={environment:t,configuration:i,triggerAspect:g,onChangeAspect:m,componentPropertiesAspect:v,disposeAspect:h,countableChoicesList:L,countableChoicesListInsertAspect:O,optionsAspect:b,optionPropertiesAspect:y,createWrapAspect:C,createChoiceBaseAspect:D,isChoiceSelectableAspect:{isSelectable:function(e){return!0}},createElementAspect:E,choicesDomFactory:P,staticDomFactory:w,filterPredicateAspect:I,wrapsCollection:S,choicesEnumerableAspect:x,filteredChoicesList:H,filterManagerAspect:M,hoveredChoiceAspect:F,navigateAspect:B,picksList:_,wraps:V,addPickAspect:A,removePickAspect:k};!function(e,t){for(var n=0;n<e.length;n++){var i,o;null==(i=(o=e[n]).plugStaticDom)||i.call(o,t)}}(n,T);var N,R,W=w.create(l),j=W.choicesDom,q=(0,W.createStaticDom)(e,u),U=q.staticDom,z=q.staticManager,G=function(e,t,n){var i=t.createElement("INPUT");Be(i,n.filterInput),i.setAttribute("type","search"),i.setAttribute("autocomplete","off");var o=ge();return{filterInputElement:i,isEmpty:function(){return!i.value},setEmpty:function(){i.value=""},getValue:function(){return i.value},setFocus:function(){i.focus()},setWidth:function(e){i.style.width=1.3*e.length+2+"ch"},setFocusIfNotTarget:function(e){e!=i&&i.focus()},onInput:function(e){o.bind(i,"input",e)},onFocusIn:function(e){o.bind(i,"focusin",e)},onFocusOut:function(e){o.bind(i,"focusout",e)},onKeyDown:function(e){o.bind(i,"keydown",e)},onKeyUp:function(e){o.bind(i,"keyup",e)},dispose:function(){o.unbind(),e||i.parentNode&&i.parentNode.removeChild(i)}}}(U.isDisposablePicksElement,E,l),K=function(e,t,n,i){var o=n.createElement("LI");Be(e,i.picks),Be(o,i.pickFilter);var r=Ve(e,i.picks_disabled),c=Ve(e,i.picks_focus),a=!1;return{picksElement:e,pickFilterElement:o,createPickElement:function(){var t=n.createElement("LI");return Be(t,i.pick),{pickElement:t,attach:function(n){return e.insertBefore(t,null!=n?n:o)},detach:function(){return e.removeChild(t)}}},disable:function(e){r(e)},toggleFocusStyling:function(){c(a)},getIsFocusIn:function(){return a},setIsFocusIn:function(e){a=e},dispose:function(){t||(r(!1),c(!1),o.parentNode&&o.parentNode.removeChild(o))}}}(U.picksElement,U.isDisposablePicksElement,E,l),X=(N=j.choicesElement,{isChoicesVisible:function(){return"none"!=N.style.display},setChoicesVisible:function(e){N.style.display=e?"block":"none"},updatePopupLocation:function(){}}),Y=function(e,t){return{forceResetFilter:function(){e.setEmpty(),t.processEmptyInput()}}}(G,M),$=function(e,t){return{resetFilter:function(){e.isEmpty()||t.forceResetFilter()}}}(G,Y),J=function(e){return{setFocusIn:function(t){e.setIsFocusIn(t),e.toggleFocusStyling()}}}(K),Q=function(e,t,n,i){return{create:function(o,r,c){var a=ge(),s=i.getButtonHTML();o.innerHTML="<span></span>"+s;var u=o.querySelector("SPAN"),l=o.querySelector("BUTTON");a.bind(l,"click",c),Be(u,e.pickContent),Be(l,e.pickButton);var d=Ve(u,e.pickContent_disabled);return{pickDom:{pickContentElement:u,pickButtonElement:l},pickDomManagerHandlers:{updateData:function(){u.textContent=n.getText(r.option)},updateDisabled:function(){d(r.isOptionDisabled)},updateComponentDisabled:function(){l.disabled=t.getDisabled()}},dispose:function(){a.unbind()}}}}}(l,v,y,(R=i.pickButtonHTML,{getButtonHTML:function(){return R}})),Z=function(e,t){return{buildPick:function(n,i){var o=e.createPickElement(),r=o.pickElement,c=o.attach,a=o.detach,s=t.create(r,n,i),u=s.dispose,l=s.pickDom,d=s.pickDomManagerHandlers;d.updateData(),d.updateDisabled&&d.updateDisabled(),d.updateComponentDisabled&&d.updateComponentDisabled();var p={pickDom:l,pickDomManagerHandlers:d,pickElementAttach:c,dispose:function(){a(),u(),p.pickDomManagerHandlers=null,p.pickDom=l,p.pickElementAttach=null,p.dispose=null}};return p}}}(K,Q),ee=function(e,t,n){return{producePick:function(i,o){var r=n.buildPick(i,(function(e){return o.removeOnButton(e)})),c=function(){return t.removePick(i,r)};o.removeOnButton=c,r.pickElementAttach();var a=e.add(r).remove;return r.setSelectedFalse=c,r.wrap=i,r.dispose=Le(a,(function(){r.setSelectedFalse=null,r.wrap=null}),r.dispose),o.removeAndDispose=function(){return r.dispose()},r}}}(_,k,Z),te=function(e){return{createPickHandlers:function(t){var n={producePick:function(){return e.producePick(t,n)},removeAndDispose:null,removeOnButton:null};return n}}}(ee),ne=function(e,t){return{toggle:function(n){var i=e.createPickHandlers(n);return t.addPick(n,i),!0}}}(te,A),ie=function(e,t){return{fullMatch:function(n){var i=e.createPickHandlers(n);return t.addPick(n,i),!0}}}(te,A),oe=function(e,t,n){return{processInput:function(){var i=e.getValue(),o=i.trim(),r=!1;if(""==o?r=!0:t.setFilter(o.toLowerCase()),!r&&1==t.getNavigateManager().getCount()){var c=t.getNavigateManager().getHead(),a=t.getFilter();c.choice.searchText==a&&n.fullMatch(c)&&(e.setEmpty(),r=!0)}return{filterInputValue:i,isEmpty:r}}}}(G,M,ie),re=function(e,t){return{choiceClick:function(n){e.toggle(n),t.setFocus()}}}(ne,G),ce=function(e,t,n){var i=function(e,i,o){var r=t.getText(e.option),c=n.getHighlighter();c?c(o,i,r):o.textContent=r},o=function(e,n){n.textContent=t.getText(e.option)};return{create:function(t,n,r){var c=null,a=null,s=ge();if(s.bind(t,"click",r),n.hasOwnProperty("isOptionSelected")){t.innerHTML='<div><input formnovalidate type="checkbox"><label></label></div>';var u=t.querySelector("DIV"),l=u.querySelector("INPUT"),d=u.querySelector("LABEL");Be(u,e.choiceContent),Be(l,e.choiceCheckBox),Be(d,e.choiceLabel),c={choiceElement:t,choiceContentElement:u,choiceCheckBoxElement:l,choiceLabelElement:d};var p=Ve(t,e.choice_selected),f=Ve(t,e.choice_disabled),h=Ve(l,e.choiceCheckBox_disabled),g=Ve(d,e.choiceLabel_disabled),m=Ve(t,{classes:[],styles:{cursor:"default"}}),v=Ve(t,(function(){return e.choice_disabled_hover&&!0===n.isOptionDisabled&&!1===n.isOptionSelected?e.choice_disabled_hover:e.choice_hover}));a={updateData:function(){return o(n,d)},updateHighlighted:function(){return i(n,c,d)},updateHoverIn:function(){v(n.choice.isHoverIn)},updateDisabled:function(){f(n.isOptionDisabled),h(n.isOptionDisabled),g(n.isOptionDisabled);var e=n.isOptionDisabled&&!n.isOptionSelected;l.disabled=e,m(e)},updateSelected:function(){p(n.isOptionSelected),l.checked=n.isOptionSelected,(n.isOptionDisabled||n.choice.isHoverIn)&&v(n.choice.isHoverIn,!0)}}}else{var b=Ve(t,(function(){return n.isOptionDisabled&&e.choice_disabled_hover?e.choice_disabled_hover:e.choice_hover}));t.innerHTML="<span></span>";var y=t.querySelector("SPAN");c={choiceElement:t,choiceContentElement:y},a={updateData:function(){return o(n,y)},updateHighlighted:function(){return i(n,c,t)},updateHoverIn:function(){b(n.choice.isHoverIn)}}}return{choiceDom:c,choiceDomManagerHandlers:a,dispose:function(){s.unbind()}}}}}(l,y,T.highlightAspect),ae=function(e,t,n){return{buildChoice:function(i){var o=e.createChoiceElement(),r=o.choiceElement,c=o.setVisible,a=o.attach,s=o.detach;i.choice.choiceElement=r,i.choice.choiceElementAttach=a,i.choice.isChoiceElementAttached=!0;var u=t.create(r,i,(function(){return n.choiceClick(i)})),l=u.dispose,d=u.choiceDom,p=u.choiceDomManagerHandlers;i.choice.choiceDom=d,p.updateData(),p.updateSelected&&p.updateSelected(),p.updateDisabled&&p.updateDisabled(),i.choice.choiceDomManagerHandlers=p,i.choice.remove=function(){s()},i.choice.isFilteredIn=!0,i.choice.setHoverIn=function(e){i.choice.isHoverIn=e,p.updateHoverIn()},i.choice.setVisible=function(e){i.choice.isFilteredIn=e,c(i.choice.isFilteredIn)},i.choice.dispose=function(){i.choice.choiceDomManagerHandlers=null,l(),i.choice.choiceElement=null,i.choice.choiceDom=null,i.choice.choiceElementAttach=null,i.choice.isChoiceElementAttached=!1,i.choice.remove=null,i.choice.setVisible=null,i.choice.setHoverIn=null,i.choice.dispose=null},i.dispose=function(){i.choice.dispose(),i.dispose=null}}}}(j,ce,re),se=function(e){return{buildAndAttachChoice:function(t,n){e.buildChoice(t),t.choice.choiceElementAttach(null==n?void 0:n())}}}(ae),le={resetLayout:function(){return $.resetFilter()}},pe=function(e,t,n,i){return{attach:function(o){var r=e.createWrap(o);r.choice=t.createChoiceBase(o),i.push(r),n.buildAndAttachChoice(r)}}}(C,D,se,V),fe=function(e,t){return{loop:function(){for(var n=e.getOptions(),i=0;i<n.length;i++){var o=n[i];t.attach(o)}}}}(b,pe),he=function(e,t,n,i,o){return{updateData:function(){o.resetLayout(),e.choicesListElement.innerHTML="",t.clear(),n.forEach((function(e){return e.dispose()})),n.reset(),i.loop()}}}(j,V,_,fe,le),me=function(e){return{update:function(){e.updateData()}}}(he),ve=function(e){return{load:function(){e.loop()}}}(fe);Ae(T,((r={staticDom:U,picksDom:K,choicesDom:j,filterDom:G,resetLayoutAspect:le,pickDomFactory:Q,choiceDomFactory:ce,choicesVisibilityAspect:X,staticManager:z,buildChoiceAspect:ae,optionToggleAspect:ne,choiceClickAspect:re,buildAndAttachChoiceAspect:se,optionsLoopAspect:fe,optionAttachAspect:pe,buildPickAspect:Z,producePickAspect:ee,createPickHandlersAspect:te,inputAspect:oe,resetFilterListAspect:Y,resetFilterAspect:$,specialPicksEventsAspect:{backSpace:function(e){e.setSelectedFalse()}}}).resetLayoutAspect=le,r.focusInAspect=J,r.loadAspect=ve,r.updateDataAspect=he,r.updateAspect=me,r.fullMatchAspect=ie,r));var be=function(e,t){var n=[];if(e)for(var i=0;i<e.length;i++){var o=e[i](t);o&&n.push(o)}var r=[];return{buildApi:function(e){for(var t=0;t<n.length;t++){var i,o,c=null==(i=(o=n[t]).buildApi)?void 0:i.call(o,e);c&&r.push(c)}},dispose:function(){for(var e=0;e<r.length;e++)r[e]();r=null;for(var t=0;t<n.length;t++){var i,o;null==(i=(o=n[t]).dispose)||i.call(o)}n=null}}}(n,T),ye=Dt(T),Ce={component:"BsMultiSelect.api"};return be.buildApi(Ce),Ce.dispose=Le(le.resetLayout,(function(){h.dispose()}),be.dispose,(function(){_.forEach((function(e){return e.dispose()}))}),ye.dispose,V.dispose,z.dispose,K.dispose,G.dispose),Ce.updateData=function(){he.updateData()},Ce.update=function(){me.update()},null==o||o(Ce,T),K.pickFilterElement.appendChild(G.filterInputElement),K.picksElement.appendChild(K.pickFilterElement),z.appendToContainer(),ve.load(),Ce}var kt=[{old:"selectedPanelDisabledBackgroundColor",opt:"picks_disabled",style:"backgroundColor"},{old:"selectedPanelFocusValidBoxShadow",opt:"picks_focus_valid",style:"boxShadow"},{old:"selectedPanelFocusInvalidBoxShadow",opt:"picks_focus_invalid",style:"boxShadow"},{old:"selectedPanelDefMinHeight",opt:"picks_def",style:"minHeight"},{old:"selectedPanelLgMinHeight",opt:"picks_lg",style:"minHeight"},{old:"selectedPanelSmMinHeight",opt:"picks_sm",style:"minHeight"},{old:"selectedItemContentDisabledOpacity",opt:"choiceLabel_disabled",style:"opacity"}],Et=[{old:"dropDownMenuClass",opt:"choices"},{old:"dropDownItemClass",opt:"choice"},{old:"dropDownItemHoverClass",opt:"choice_hover"},{old:"selectedPanelClass",opt:"picks"},{old:"selectedItemClass",opt:"pick"},{old:"removeSelectedItemButtonClass",opt:"pickButton"},{old:"filterInputItemClass",opt:"pickFilter"},{old:"filterInputClass",opt:"filterInput"},{old:"selectedPanelFocusClass",opt:"picks_focus"},{old:"selectedPanelDisabledClass",opt:"picks_disabled"},{old:"selectedItemContentDisabledClass",opt:"pick_disabled"}];function Pt(e,t){var n={containerClass:"dashboardcode-bsmultiselect"};return function(e,t){for(var n=0;n<e.length;n++){var i,o;null==(i=(o=e[n]).plugDefaultConfig)||i.call(o,t)}}(t,n),{create:function(i,o){var r;o&&o.plugins&&console.log("DashboarCode.BsMultiSelect: 'options.plugins' is depricated, use - MultiSelectBuilder(environment, plugins) instead");var c,a,s={};o instanceof Function?(c=o,o=null):c=null==(a=o)?void 0:a.buildConfiguration,o&&function(e){e.css||(e.css={});var t=e.css;e.cssPatch||(e.cssPatch={});var n=e.cssPatch;if((e.selectedPanelFocusBorderColor||e.selectedPanelFocusBoxShadow)&&(console.log("DashboarCode.BsMultiSelect: selectedPanelFocusBorderColor and selectedPanelFocusBoxShadow are depricated, use - cssPatch:{picks_focus:{borderColor:'myValue', boxShadow:'myValue'}}"),n.picks_focus||(n.picks_focus={boxShadow:e.selectedPanelFocusBoxShadow,borderColor:e.selectedPanelFocusBorderColor}),delete e.selectedPanelFocusBorderColor,delete e.selectedPanelFocusBoxShadow),kt.forEach((function(t){if(e[t.old]){if(console.log("DashboarCode.BsMultiSelect: "+t.old+" is depricated, use - cssPatch:{"+t.opt+":{"+t.style+":'myValue'}}"),!e[t.opt]){var n={};n[t.style]=e[t.old],e.cssPatch[t.opt]=n}delete e[t.old]}})),Et.forEach((function(n){e[n.old]&&(console.log("DashboarCode.BsMultiSelect: "+n.old+" is depricated, use - css:{"+n.opt+":'myValue'}"),t[n.opt]||(t[n.opt]=e[n.old]),delete e[n.old])})),e.inputColor&&(console.log("DashboarCode.BsMultiSelect: inputColor is depricated, remove parameter"),delete e.inputColor),e.useCss&&(console.log("DashboarCode.BsMultiSelect: useCss(=true) is depricated, use - 'useCssPatch: false'"),t.pick_disabled||(e.useCssPatch=!e.useCss),delete e.useCss),e.getIsValid||e.getIsInValid)throw"DashboarCode.BsMultiSelect: parameters getIsValid and getIsInValid are depricated and removed, use - getValidity that should return (true|false|null) "}(o),s.css=je(n.css,null==(r=o)?void 0:r.css),function(e,t,n,i){for(var o=0;o<e.length;o++){var r,c;null==(r=(c=e[o]).plugMergeSettings)||r.call(c,t,n,i)}}(t,s,n,o),Ae(s,o),Ae(s,n);var u=null==c?void 0:c(i,s);return At(i,e,t,s,u)},defaultSettings:n}}var wt=(0,function(e){e.trigger||(e.trigger=function(t,n){return t.dispatchEvent(new e.window.Event(n))});var t=He(ke({Bs5Plugin:me},gt)),n=Pt(e,t),i=n.create,o=n.BsMultiSelectDefault;i.Default=o;var r=He(ke({Bs5Plugin:me},mt)),c=Pt(e,r),a=c.create,s=c.BsPicksDefault;return a.Default=s,{BsMultiSelect:i,BsPicks:a,MultiSelectTools:{MultiSelectBuilder:Pt,plugins:ke({Bs5Plugin:me},vt),utilities:bt}}}({window,createPopper:se}).BsMultiSelect)(document.querySelector("#bsMultiSelectOnDropdown"));console.log(wt)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,